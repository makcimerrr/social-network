-- UTILISATEUR
CREATE TABLE IF NOT EXISTS USERS (
    ID INTEGER PRIMARY KEY,
    Email VARCHAR(150) NOT NULL,
    Password VARCHAR(150) NOT NULL,
    FirstName VARCHAR(150) NOT NULL,
    LastName VARCHAR(150) NOT NULL,
    DateOfBird DATE NOT NULL,
    Avatar BLOB,
    Nickname VARCHAR(150),
    AboutMe VARCHAR(500),
    PrivateProfil INT, -- 0 True, 1 False
    UUID INTEGER,
);

-- TABLE FOR POST
CREATE TABLE IF NOT EXISTS POST (
    IDPost INTEGER PRIMARY KEY,
    UserID INTEGER,
    Title VARCHAR(150),
    PostContent TEXT,
    Date TEXT,
    Image BLOB,
    Private INTEGER, -- 0 Private, 1 Public, 2 Select user
    FOREIGN KEY (UserID) REFERENCES USERS (ID)
);

CREATE TABLE IF NOT EXISTS COMMENT (
    IDComment INTEGER PRIMARY KEY,
    IDPost INTEGER,
    UserID INTEGER,
    CommentContent TEXT,
    Date TEXT,
    Image BLOB,
    FOREIGN KEY (IDPost) REFERENCES POST (IDPost),
    FOREIGN KEY (UserID) REFERENCES USERS (ID)
);

CREATE TABLE IF NOT EXISTS POSTSELECTUSERS (
    ID INTEGER PRIMARY KEY,
    IDPost INTEGER,
    UserID INTEGER,
    FOREIGN KEY (IDPost) REFERENCES POST (IDPost),
    FOREIGN KEY (UserID) REFERENCES USERS (ID)
);

-- TABLE FOR GROUPS
CREATE TABLE IF NOT EXISTS LISTGROUPS (
    IDGroup INTEGER PRIMARY KEY,
    NameGroup VARCHAR(150),
    UserID_Creator INTEGER,
    AboutUs VARCHAR(500),
    Image BLOB,
    FOREIGN KEY (UserID_Creator) REFERENCES USERS (ID)
);

CREATE TABLE IF NOT EXISTS MEMBERSGROUPS (
    ID INTEGER PRIMARY KEY,
    IDGroup INTEGER,
    UserID INTEGER,
    ValidateInvite INTEGER, -- 0 True, 1 False
    FOREIGN KEY (IDGroup) REFERENCES LISTGROUPS (IDGroup),
    FOREIGN KEY (UserID) REFERENCES USERS (ID)
);

CREATE TABLE IF NOT EXISTS CHATSGROUPS (
    ID INTEGER PRIMARY KEY,
    IDGroup INTEGER,
    Date TEXT,
    UserID_Sender INTEGER,
    ContentMessage TEXT,
    FOREIGN KEY (IDGroup) REFERENCES LISTGROUPS (IDGroup),
    FOREIGN KEY (UserID_Sender) REFERENCES USERS (ID)
);

CREATE TABLE IF NOT EXISTS EVENTGROUPS (
    IDEvent INTEGER PRIMARY KEY,
    IDGroup INTEGER,
    Date TEXT,
    Title VARCHAR(150),
    Description VARCHAR(500),
    UserID_Sender INTEGER,
    FOREIGN KEY (IDGroup) REFERENCES LISTGROUPS (IDGroup),
    FOREIGN KEY (UserID_Sender) REFERENCES USERS (ID)
);

CREATE TABLE IF NOT EXISTS RESPONSEEVENTGROUPS (
    ID INTEGER PRIMARY KEY,
    IDEvent INTEGER,
    UserID INTEGER,
    Option INTEGER -- 0 Not Answeredï»¿/1 YES/2 NO
    FOREIGN KEY (IDEvent) REFERENCES EVENTGROUPS (IDEvent),
    FOREIGN KEY (UserID) REFERENCES USERS (ID)
);

-- PRIVATE MESSAGE / MP
CREATE TABLE IF NOT EXISTS PRIVATEMESSAGE (
    IDMessage INTEGER PRIMARY KEY,
    UserID_Sender INTEGER,
    UserID_Receiver INTEGER,
    Date TEXT,
    ContentMessage TEXT,
    Image BLOB,
    FOREIGN KEY (UserID_Sender) REFERENCES USERS (ID),
    FOREIGN KEY (UserID_Receiver) REFERENCES USERS (ID)
);

-- FOLLOWERS
CREATE TABLE IF NOT EXISTS FOLLOWERS (
    ID INTEGER PRIMARY KEY,
    UserID_Following INTEGER,
    UserID_Follower INTEGER,
    DateFollow TEXT,
    ValidateFollow INTEGER, -- 0 True, 1 False
    FOREIGN KEY (UserID_Sender) REFERENCES USERS (ID),
    FOREIGN KEY (UserID_Receiver) REFERENCES USERS (ID)
);

-- NOTIFICATIONS (Only one ID completed)
CREATE TABLE IF NOT EXISTS NOTIFICATIONS (
    IDNotif INTEGER PRIMARY KEY,
    IDPrivateMessage INTEGER DEFAULT 0,
    IDPost INTEGER DEFAULT 0,
    IDComment INTEGER DEFAULT 0,
    IDGroup INTEGER DEFAULT 0,
    IDEvent INTEGER DEFAULT 0,
    UserID_Receiver INTEGER,
    Date TEXT,
    FOREIGN KEY (IDPrivateMessage) REFERENCES PRIVATEMESSAGE (IDMessage),
    FOREIGN KEY (IDPost) REFERENCES POST (IDPost),
    FOREIGN KEY (IDComment) REFERENCES COMMENT (IDComment),
    FOREIGN KEY (IDGroup) REFERENCES LISTGROUPS (IDGroup),
    FOREIGN KEY (IDEvent) REFERENCES EVENTGROUPS (IDEvent),
    FOREIGN KEY (UserID_Receiver) REFERENCES USERS (ID)
);
